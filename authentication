//Program cs
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// K·∫øt n·ªëi ƒë·∫øn database (s·ª≠ d·ª•ng PostgreSQL, c√≥ th·ªÉ thay b·∫±ng SQL Server, MySQL...)
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));

// Th√™m Identity v√†o d·ª± √°n
builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    .AddEntityFrameworkStores<ApplicationDbContext>()
    .AddDefaultTokenProviders();

// C·∫•u h√¨nh Authentication b·∫±ng Cookie
builder.Services.ConfigureApplicationCookie(options =>
{
    options.LoginPath = "/Account/Login";   // Trang login
    options.LogoutPath = "/Account/Logout"; // Trang logout
    options.AccessDeniedPath = "/Account/AccessDenied"; // Trang l·ªói quy·ªÅn h·∫°n
    options.ExpireTimeSpan = TimeSpan.FromMinutes(30); // H·∫øt h·∫°n sau 30 ph√∫t
    options.SlidingExpiration = true; // Gia h·∫°n th·ªùi gian n·∫øu c√≥ t∆∞∆°ng t√°c
});

builder.Services.AddControllersWithViews();

var app = builder.Build();

app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();
app.Run();



//View layout
<ul class="navbar-nav">
    @if (User.Identity.IsAuthenticated)
    {
        <li class="nav-item">
            <span class="nav-link">üë§ @User.Identity.Name</span>
        </li>
        <li class="nav-item">
            <a class="nav-link" asp-controller="Account" asp-action="Logout">üö™ Logout</a>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link" asp-controller="Account" asp-action="Login">üîë Login</a>
        </li>
    }
</ul>


//controller
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

public class AccountController : Controller
{
    private readonly SignInManager<IdentityUser> _signInManager;
    private readonly UserManager<IdentityUser> _userManager;

    public AccountController(SignInManager<IdentityUser> signInManager, UserManager<IdentityUser> userManager)
    {
        _signInManager = signInManager;
        _userManager = userManager;
    }

    // Hi·ªÉn th·ªã trang ƒëƒÉng nh·∫≠p
    [HttpGet]
    public IActionResult Login()
    {
        return View();
    }

    // X·ª≠ l√Ω ƒëƒÉng nh·∫≠p
    [HttpPost]
    public async Task<IActionResult> Login(string email, string password)
    {
        var user = await _userManager.FindByEmailAsync(email);
        if (user != null)
        {
            var result = await _signInManager.PasswordSignInAsync(user, password, true, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                return RedirectToAction("Index", "Home"); // Chuy·ªÉn ƒë·∫øn trang ch√≠nh
            }
        }
        ViewBag.ErrorMessage = "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!";
        return View();
    }

    // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
    public async Task<IActionResult> Logout()
    {
        await _signInManager.SignOutAsync();
        return RedirectToAction("Login", "Account");
    }
}

//dbContext
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

public class ApplicationDbContext : IdentityDbContext<IdentityUser>
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public DbSet<Product> Products { get; set; }
    public DbSet<Category> Categories { get; set; }
}
