\\Helper
using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Text;

public static class PaginationHelper
{
    public static IHtmlContent RenderPagination(this IHtmlHelper htmlHelper, int currentPage, int totalPages, string urlTemplate)
    {
        if (totalPages <= 1) return HtmlString.Empty;

        var sb = new StringBuilder();
        sb.AppendLine("<nav aria-label='Page navigation'>");
        sb.AppendLine("<ul class='pagination justify-content-center'>");

        // Previous button
        sb.AppendLine($"<li class='page-item {(currentPage == 1 ? "disabled" : "")}'>");
        sb.AppendLine($"<a class='page-link' href='{urlTemplate.Replace("{page}", (currentPage - 1).ToString())}'>Previous</a>");
        sb.AppendLine("</li>");

        // Page numbers
        for (int i = 1; i <= totalPages; i++)
        {
            sb.AppendLine($"<li class='page-item {(currentPage == i ? "active" : "")}'>");
            sb.AppendLine($"<a class='page-link' href='{urlTemplate.Replace("{page}", i.ToString())}'>{i}</a>");
            sb.AppendLine("</li>");
        }

        // Next button
        sb.AppendLine($"<li class='page-item {(currentPage == totalPages ? "disabled" : "")}'>");
        sb.AppendLine($"<a class='page-link' href='{urlTemplate.Replace("{page}", (currentPage + 1).ToString())}'>Next</a>");
        sb.AppendLine("</li>");

        sb.AppendLine("</ul>");
        sb.AppendLine("</nav>");

        return new HtmlString(sb.ToString());
    }
}

\\call helper in view
@using YourProjectNamespace.Helpers
...
@Html.RenderPagination(currentPage, totalPages, "/Product/Index?page={page}")

//Controller
public IActionResult Index(int page = 1)
{
    int pageSize = 10;
    var products = _context.Products.Skip((page - 1) * pageSize).Take(pageSize).ToList();
    int totalItems = _context.Products.Count();
    int totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

    ViewBag.CurrentPage = page;
    ViewBag.TotalPages = totalPages;

    return View(products);
}

//view
@model List<Product>
@{
    var currentPage = ViewBag.CurrentPage ?? 1;
    var totalPages = ViewBag.TotalPages ?? 1;
}
<div class="table-responsive" style="max-height:500px; overflow-y:auto;">
    <table class="table table-striped table-bordered text-center">
        <thead class="sticky-top table-dark">
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Price</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Price</td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="showDetails(@item.Id)">Xem chi tiáº¿t</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@Html.RenderPagination(currentPage, totalPages, "/Product/Index?page={page}")
