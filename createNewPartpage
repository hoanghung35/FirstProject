//Model
using System.ComponentModel.DataAnnotations;

public class Product
{
    [Key]
    public string Name { get; set; }  // PK

    [Required]
    public int Age { get; set; }

    [Required]
    public string Address { get; set; }

    [Required]
    [EmailAddress]
    public string Email { get; set; }
}

using System.Collections.Generic;

public class ProductViewModel
{
    public List<Product> Products { get; set; }
    public int CurrentPage { get; set; }
    public int TotalPages { get; set; }
    public string SearchQuery { get; set; }
    public string SortOrder { get; set; } // Sắp xếp theo name, age, address, email
}


//Controller

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

public class ProductController : Controller
{
    private readonly ApplicationDbContext _context;
    private const int PageSize = 10; // Số bản ghi trên mỗi trang

    public ProductController(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<IActionResult> Office(int page = 1, string searchQuery = "", string sortOrder = "name")
    {
        return await GetPagedProducts("Office", page, searchQuery, sortOrder);
    }

    public async Task<IActionResult> Tools(int page = 1, string searchQuery = "", string sortOrder = "name")
    {
        return await GetPagedProducts("Tools", page, searchQuery, sortOrder);
    }

    public async Task<IActionResult> Invent(int page = 1, string searchQuery = "", string sortOrder = "name")
    {
        return await GetPagedProducts("Invent", page, searchQuery, sortOrder);
    }

    private async Task<IActionResult> GetPagedProducts(string viewName, int page, string searchQuery, string sortOrder)
    {
        var query = _context.Products.AsQueryable();

        // Tìm kiếm theo name, address, email
        if (!string.IsNullOrEmpty(searchQuery))
        {
            query = query.Where(p =>
                p.Name.Contains(searchQuery) ||
                p.Address.Contains(searchQuery) ||
                p.Email.Contains(searchQuery));
        }

        // Sắp xếp theo trường được chọn
        query = sortOrder switch
        {
            "age" => query.OrderBy(p => p.Age),
            "address" => query.OrderBy(p => p.Address),
            "email" => query.OrderBy(p => p.Email),
            _ => query.OrderBy(p => p.Name), // Mặc định sắp xếp theo Name
        };

        var totalRecords = await query.CountAsync();
        var totalPages = (int)Math.Ceiling((double)totalRecords / PageSize);

        var products = await query
            .Skip((page - 1) * PageSize)
            .Take(PageSize)
            .ToListAsync();

        var viewModel = new ProductViewModel
        {
            Products = products,
            CurrentPage = page,
            TotalPages = totalPages,
            SearchQuery = searchQuery,
            SortOrder = sortOrder
        };

        return View(viewName, viewModel);
    }
}


//Partrial View
**_Product_List
@model ProductViewModel

<form method="get" asp-action="@ViewData["ActionName"]">
    <input type="text" name="searchQuery" value="@Model.SearchQuery" placeholder="Tìm kiếm..." />
    <button type="submit">Tìm</button>
</form>

<table class="table">
    <thead>
        <tr>
            <th><a asp-action="@ViewData["ActionName"]" asp-route-sortOrder="name">Name</a></th>
            <th><a asp-action="@ViewData["ActionName"]" asp-route-sortOrder="age">Age</a></th>
            <th><a asp-action="@ViewData["ActionName"]" asp-route-sortOrder="address">Address</a></th>
            <th><a asp-action="@ViewData["ActionName"]" asp-route-sortOrder="email">Email</a></th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model.Products)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Age</td>
                <td>@product.Address</td>
                <td>@product.Email</td>
                <td>
                    <button class="btn btn-primary btn-edit"
                            data-name="@product.Name"
                            data-age="@product.Age"
                            data-address="@product.Address"
                            data-email="@product.Email"
                            data-bs-toggle="modal"
                            data-bs-target="#editProductModal">
                        Chỉnh sửa
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

**Pagination View
@model ProductViewModel

<nav>
    <ul class="pagination">
        @if (Model.CurrentPage > 1)
        {
            <li class="page-item">
                <a class="page-link" asp-action="@ViewData["ActionName"]" asp-route-page="@(Model.CurrentPage - 1)"
                   asp-route-searchQuery="@Model.SearchQuery" asp-route-sortOrder="@Model.SortOrder">Previous</a>
            </li>
        }

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                <a class="page-link" asp-action="@ViewData["ActionName"]" asp-route-page="@i"
                   asp-route-searchQuery="@Model.SearchQuery" asp-route-sortOrder="@Model.SortOrder">@i</a>
            </li>
        }

        @if (Model.CurrentPage < Model.TotalPages)
        {
            <li class="page-item">
                <a class="page-link" asp-action="@ViewData["ActionName"]" asp-route-page="@(Model.CurrentPage + 1)"
                   asp-route-searchQuery="@Model.SearchQuery" asp-route-sortOrder="@Model.SortOrder">Next</a>
            </li>
        }
    </ul>
</nav>


//call patrial
@{
    ViewData["ActionName"] = "Office";
}
<partial name="_ProductList" model="Model" />
<partial name="_Pagination" model="Model" />

